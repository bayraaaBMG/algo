Таны асуусан бодлого нь хоёртын оновчтой хайлтын мод (Optimal Binary Search Tree - OBST) болон хомхойлох (greedy) алгоритмын аргчлалыг хэрэглэхэд чиглэгдсэн байна. OBST нь хайлтын модон доторх түлхүүрүүдийг оновчтойгоор зохион байгуулж, хайлтын дундаж зардлыг багасгах зорилготой байдаг.

Харин хомхойлох алгоритмууд нь тухайн мөчид хамгийн сайн шийдлийг сонгож, эцсийн шийдэлд хүрдэг зарчимтай. Дараах жишээ бодлого дээр хоёр аргыг бататгаж үзье.

### Бодлого:
Нэг цуваа түлхүүрүүдийн магадлалууд өгөгдсөн ба эдгээр түлхүүрүүдийн OBST-г байгуулж, дундаж хайлтын зардлыг тооц. Хэрвээ түлхүүрүүдэд жин өгөгдөөгүй бол хомхойлох аргыг ашиглан OBST-г хэрхэн байгуулах вэ?

#### Жишээ Бодлого:

| Түлхүүрүүд | A | B | C | D |
|------------|---|---|---|---|
| Магадлал   | 0.1 | 0.2 | 0.4 | 0.3 |

Түлхүүрүүдийн OBST-г байгуулж, хайлтын дундаж зардлыг олох шаардлагатай. Энэ бодлогыг дараах байдлаар шийдэж болно.

### 1. Оновчтой Хайлтын Мод (OBST):
OBST алгоритм нь түлхүүрүүдийн байрлал, хайлтын магадлалыг харгалзан модыг оновчтойгоор зохион байгуулж, дундаж зардлыг багасгадаг.

#### Алгоритм:
1. Түлхүүрүүдийн магадлалууд өгөгдсөн тул тэдгээрийн дундаж хайлтын зардлыг олох матрицийг үүсгэх хэрэгтэй.
2. `dp[i][j]` матриц нь i-ээс j хүртэлх түлхүүрүүдийн хамгийн бага зардлыг хадгална.
3. Хүснэгтийг задалж дүүргэсний дараа, эцсийн зардал нь хамгийн бага хайлтын модны зардал болно.

### 2. Хомхойлох Аргачлал:
Хомхойлох аргыг ашиглах үед тухайн мөчид хамгийн бага хайлтын магадлалтай түлхүүрийг сонгож, OBST-г үүсгэдэг.

#### Алгоритм:
1. Түлхүүрүүдийг магадлалын дагуу өсөхөөр эрэмбэлнэ.
2. Эрэмбэлсэн дарааллаар түлхүүрүүдийг модны түвшинд байршуулж, хайлтын дундаж зардлыг тооцно.

### Шийдлийн Харьцуулалт:
OBST нь оновчтой зардлыг олдог бол хомхойлох алгоритм тухайн мөчид хамгийн сайн шийдлийг сонгодог учраас үр дүн нь OBST-оос ялгаатай байж болно.

#### Дараагийн Алхам:
Бодлогоо илүү нарийвчилсан жишээн дээр эсвэл таны өгөгдөл дээр шийдэж үзэх боломжтой. Хэрвээ та тодорхой жишээ өгөгдлөөр бодож үзэхийг хүсвэл би туслахад бэлэн байна!